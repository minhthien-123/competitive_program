#include <bits/stdc++.h>
using namespace std;
/*
Generator gen.cpp

- Generates 25 folders phuocru/01 .. phuocru/25 each containing:
    - phuocru.inp  (input)
    - phuocru.out (output; generated by running phuocru.exe if available)
- The generator ensures:
    * Each subtask has 5 tests.
    * For each test, n is set to the worst-case for that subtask:
        - Subtask1 (tests 01-05): n = 200000, k = 0
        - Subtask2 (06-10): n = 100
        - Subtask3 (11-15): n = 1000
        - Subtask4 (16-20): n = 200000
        - Subtask5 (21-25): n = 200000
    * For k > 0 we choose k in [0, MAX_A * n] so it can always be represented as a sum of <= n elements each <= MAX_A.
    * The generator writes phuocru.inp and then attempts to run `phuocru.exe` (or `./phuocru` on POSIX)
      to produce phuocru.out for each test. If the executable is not present, the generator leaves a placeholder.
- This file avoids non-standard libraries; it uses mt19937_64, mkdir, and standard C++17.

Compile:
    g++ -O2 -std=c++17 gen.cpp -o gen

Run:
    Put your `phuocru.exe` (Windows) or `phuocru` (POSIX) in the same directory, then:
    ./gen

Note: On POSIX we attempt "./phuocru". On Windows we attempt "phuocru.exe".
*/

#ifdef _WIN32
#include <direct.h>
#define MKDIR(x) _mkdir(x)
#else
#include <sys/stat.h>
#include <sys/types.h>
#define MKDIR(x) mkdir((x), 0755)
#endif

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    const uint64_t SEED = 123456789;
    std::mt19937_64 rng(SEED);
    const int MAX_A = 1000000; // 1e6
    vector<int> subtask_n = {200000, 100, 1000, 200000, 200000};
    int folder_idx = 1;
    string base = "phuocru";
    // create base dir
    MKDIR(base.c_str());
    for(int s = 0; s < 5; ++s){
        int nmax = subtask_n[s];
        for(int t = 0; t < 5; ++t){
            char folder[256];
            snprintf(folder, sizeof(folder), "%s/%02d", base.c_str(), folder_idx);
            MKDIR(folder);
            string inpfile = string(folder) + "/phuocru.inp";
            string outfile = string(folder) + "/phuocru.out";
            int n = nmax; // worst-case n for subtask
            long long k;
            if (s == 0) {
                k = 0;
            } else {
                // choose k in [0, MAX_A * n]
                uint64_t maxk = (uint64_t)MAX_A * (uint64_t)n;
                std::uniform_int_distribution<uint64_t> distk(0, maxk);
                k = (long long)distk(rng);
            }
            // construct array with guaranteed subarray sum k
            vector<int> a(n, 0);
            if (k == 0) {
                // produce random array but ensure at least one zero
                std::uniform_int_distribution<int> dv(0, MAX_A);
                for(int i=0;i<n;i++) a[i] = dv(rng);
                int pos = (int)(rng() % n);
                a[pos] = 0;
            } else {
                // we will split k into chunks each <= MAX_A
                vector<long long> parts;
                long long rem = k;
                while(rem > 0){
                    // pick a chunk between 1 and MAX_A (biased)
                    long long low = std::max(1LL, (long long)MAX_A/10);
                    long long high = MAX_A;
                    long long take = (long long)(low + (rng() % (high - low + 1)));
                    if (take > rem) take = rem;
                    parts.push_back(take);
                    rem -= take;
                }
                if ((int)parts.size() > n) {
                    // evenly distribute ceiling(k/n) - should be <= MAX_A because k <= MAX_A * n
                    long long tval = (k + n - 1) / n;
                    parts.clear();
                    for(int i=0;i<n;i++) parts.push_back(tval);
                    long long ssum = (long long)tval * n;
                    long long diff = ssum - k;
                    parts[0] -= diff;
                }
                // place parts into a random block
                int L = (int)parts.size();
                int start = (int)(rng() % (n - L + 1));
                // set values: make block exactly parts, other values random
                std::uniform_int_distribution<int> dv(0, MAX_A);
                for(int i=0;i<n;i++) a[i] = dv(rng);
                for(int i=0;i<L;i++) a[start + i] = (int)parts[i];
            }
            // write input file
            FILE *f = fopen(inpfile.c_str(), "w");
            if (!f) {
                cerr << "Failed to open " << inpfile << " for writing\n";
                return 1;
            }
            fprintf(f, "%d %lld\n", n, k);
            // write array with reasonable chunking
            for(int i=0;i<n;i++){
                if (i) fprintf(f, " ");
                fprintf(f, "%d", a[i]);
                if ((i+1) % 1000 == 0) fprintf(f, "\n");
            }
            fprintf(f, "\n");
            fclose(f);
            // Attempt to run candidate solution to produce output
#ifdef _WIN32
            const char *exe = "phuocru.exe";
            char cmd[1024];
            snprintf(cmd, sizeof(cmd), "\"%s\" < \"%s\" > \"%s\"", exe, inpfile.c_str(), outfile.c_str());
            int rc = system(cmd);
            if (rc != 0) {
                // leave placeholder
                FILE *fo = fopen(outfile.c_str(), "w");
                if (fo) {
                    fprintf(fo, "### Placeholder: run the provided `phuocru.exe` with this input to produce the real output.\n");
                    fprintf(fo, "### Example: phuocru.exe < phuocru.inp > phuocru.out\n");
                    fclose(fo);
                }
            }
#else
            // POSIX: try ./phuocru or phuocru if exists
            // First try "./phuocru"
            int rc = -1;
            {
                char cmd[1024];
                snprintf(cmd, sizeof(cmd), "./phuocru < \"%s\" > \"%s\"", inpfile.c_str(), outfile.c_str());
                rc = system(cmd);
            }
            if (rc != 0) {
                // try "phuocru" (in PATH)
                char cmd2[1024];
                snprintf(cmd2, sizeof(cmd2), "phuocru < \"%s\" > \"%s\"", inpfile.c_str(), outfile.c_str());
                rc = system(cmd2);
            }
            if (rc != 0) {
                // leave placeholder
                FILE *fo = fopen(outfile.c_str(), "w");
                if (fo) {
                    fprintf(fo, "### Placeholder: run the provided `phuocru` (or phuocru.exe) with this input to produce the real output.\n");
                    fprintf(fo, "### Example: ./phuocru < phuocru.inp > phuocru.out\n");
                    fclose(fo);
                }
            }
#endif
            folder_idx++;
        }
    }
    cout << "Generated tests in folder '" << base << "'. If phuocru executable is present, outputs were produced.\n";
    cout << "Compile gen.cpp and run it in the same directory as your phuocru executable to overwrite and generate outputs.\n";
    return 0;
}
