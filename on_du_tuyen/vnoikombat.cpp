#include <bits/stdc++.h>
#define task "vnoikombat"
#define _Thiendeptrai_ signed main()
#define ll long long
#define ii std::pair<int, int>
#define iii std::pair<ii, int>
#define pll std::pair<ll, ll>
#define fi first
#define se second
#define pb push_back
#define ins insert

const int maxn = 305;
const ll inf = 4e18;
const int mod = 1e9 + 7;
const int inv = (mod + 1) / 2;
const int lg = 20;

std::vector<int> adj[maxn + 7];
int t;
ll n, s;
ll l[7], c[7][maxn + 7], r[7][maxn + 7], pre[7][maxn + 7];
pll dp[maxn + 7][maxn + 7][maxn + 7];

ll get(int i, int j, int k)
{
    return pre[1][i] + pre[2][j] + pre[3][k] + s;
}

pll calc(ll w, ll tim, ll point, ll token)
{
    if (point >= w)
    {
        return {tim, -(point - w)};
    }
    if (token <= 0)
        return {inf, -inf};
    ll need = w - point;
    ll times = (need + token - 1) / token;
    ll new_time = tim + times;
    ll new_point = point + token * times - w;
    return {new_time, -new_point};
}

_Thiendeptrai_
{
    std::ios_base::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);

    if (std::fopen(task ".inp", "r"))
    {
        std::freopen(task ".inp", "r", stdin);
        std::freopen(task ".out", "w", stdout);
    }

    std::cin >> t;
    while (t--)
    {
        std::cin >> n >> s;
        for (int i = 1; i <= 3; i++)
        {
            std::cin >> l[i];
            for (int j = 1; j <= l[i]; j++)
            {
                std::cin >> c[i][j];
            }
            for (int j = 1; j <= l[i]; j++)
            {
                std::cin >> r[i][j];
            }
        }

        for (int i = 1; i <= 3; i++)
        {
            pre[i][0] = 0;
            for (int j = 1; j <= l[i]; j++)
            {
                pre[i][j] = pre[i][j - 1] + r[i][j];
            }
        }

        for (int i = 0; i <= l[1]; i++)
        {
            for (int j = 0; j <= l[2]; j++)
            {
                for (int k = 0; k <= l[3]; k++)
                {
                    dp[i][j][k] = {inf, -inf};
                }
            }
        }

        dp[0][0][0] = {0, 0};

        ll ans = 0;
        for (int i = 0; i <= l[1]; i++)
        {
            for (int j = 0; j <= l[2]; j++)
            {
                for (int k = 0; k <= l[3]; k++)
                {
                    if (dp[i][j][k].fi > n)
                    {
                        continue;
                    }

                    ll token = get(i, j, k);

                    dp[i + 1][j][k] = std::min(dp[i + 1][j][k], calc(c[1][i + 1], dp[i][j][k].fi, -dp[i][j][k].se, token));
                    dp[i][j + 1][k] = std::min(dp[i][j + 1][k], calc(c[2][j + 1], dp[i][j][k].fi, -dp[i][j][k].se, token));
                    dp[i][j][k + 1] = std::min(dp[i][j][k + 1], calc(c[3][k + 1], dp[i][j][k].fi, -dp[i][j][k].se, token));

                    if (dp[i][j][k].fi <= n)
                    {
                        ans = std::max(ans, -dp[i][j][k].se + token * (n - dp[i][j][k].fi));
                    }
                }
            }
        }

        std::cout << ans << "\n";
    }

    return 0;
}
/*
⣿⢿⣽⣻⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣻⢿⣻⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀
⣿⣟⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢯⣿⣟⣷⣻⢷⣻⡇⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣞⡿⣿⣿⣿⣿⡄
⣷⣯⣿⣻⣿⣹⣿⡷⣿⣿⣿⣿⣿⣿⣿⣿⣻⣿⣿⢿⣷⣏⡷⣿⣿⠈⣿⣿⣿⣿⣿⣿⣿⣿⣹⣿⣿⣿⣷⣿⠘⣿⣿⣯⣿⣿⣿⣿⣿⡿⣿⣿⣟⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣾⣿⣿⡳⣟⣿⣿⣿⣿
⣿⣿⣿⣿⣻⣿⢿⣽⣿⣿⣯⣿⣿⣿⣿⢿⣽⣿⣿⣿⣿⣾⣻⣿⣿⠀⢹⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⣿⠀⠸⣿⣯⢿⣹⢿⣽⣿⡿⡏⣿⣯⠿⣽⢯⣟⢿⣿⣿⣿⣿⣿⣿⣿⣿⢟⣿⣿⡽⣯⣽⣏⡾⣿⣿⣿
⣿⣿⢾⡽⣿⣯⢿⣿⣿⡿⣻⣿⣿⣿⣿⢻⣿⣿⣽⣿⣿⣯⣿⣿⣿⠀⠘⣿⣿⡿⣿⣿⣽⣿⣿⢿⡝⣿⣿⣿⡇⠀⢿⣿⣫⣽⢻⣼⣿⣿⡇⢸⣿⡻⣭⣿⣽⣻⠹⣿⣿⣿⣿⣿⣿⣿⡿⣽⣿⣿⢿⡟⣿⡿⣭⢿⣽
⣟⣯⢿⣽⣳⣾⣿⡿⣿⡽⣷⣿⣷⣿⣽⣻⣿⣿⣿⣿⣿⣧⣿⣿⡟⠀⠘⣿⣯⣟⣧⣿⣾⣛⣿⣻⢓⣿⣿⣿⠁⠀⢹⣿⣻⣾⣻⣿⣿⣿⡇⣀⣿⣻⣵⣿⣼⣻⠀⢻⣿⣷⣿⣿⣿⣿⣿⡼⣿⣾⣯⢿⣻⣿⣧⣟⣿
⣟⣯⣟⣶⣻⢾⡽⣾⣻⣟⣿⣛⣷⣟⡾⣿⣿⣿⡏⣿⣟⣾⣟⣿⡇⠀⣨⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⣿⣞⣿⠀⠀⢸⡿⣿⣷⣻⣿⣿⣿⡇⠉⢻⣿⣿⣿⣿⢿⣶⣼⣿⣿⣞⣿⣿⣿⣿⣿⣣⣟⡷⣏⡷⣿⣿⣟⡶
⣟⣾⣹⢶⣫⢿⣹⣟⣳⣏⡷⣏⣷⣛⡾⣿⣿⣿⢹⣿⣿⣿⣿⣿⣷⠿⢿⣿⣿⢿⣿⣿⣿⣿⣿⠇⠀⣿⣞⣽⠀⠀⢸⡿⣿⣾⣿⣿⣿⣿⠀⠀⣼⣿⣿⣿⡏⡼⠀⠈⣿⣿⣯⣿⣿⣿⣿⣿⣳⣮⣟⣞⡵⣛⣿⣿⣾
⣿⡷⣭⣿⣿⢯⡽⣾⣟⣮⡿⣽⠾⣽⢾⣿⣿⡇⣸⣿⣿⣿⣿⣿⠁⠀⣸⣿⣿⣿⣿⣿⡿⣿⡿⠀⢀⣿⣯⡏⠀⠀⣾⢻⣿⣿⣿⢿⡿⣿⠀⠀⣿⣿⣿⡿⢀⡇⠀⠀⣿⣿⣿⡻⣭⣿⣿⣿⣿⣧⡿⣯⣻⣭⢿⣿⣿
⣯⣿⣿⣿⣭⣿⣽⣿⣽⣮⣷⣭⡟⣭⣿⣿⣿⢠⣿⣿⣿⣿⣿⡇⠀⢠⣿⣿⣽⣿⣿⣿⢻⣿⡇⠀⢸⣿⣿⡇⠀⠀⣯⣿⣿⣿⣿⢻⣿⡇⠀⢰⣿⣿⣿⠁⣼⠂⠀⠀⣿⣿⣿⡟⣭⣿⣿⣿⣿⣾⣽⣿⡟⣯⢻⣿⣿
⣯⣿⣿⣷⣫⣿⣿⣏⡷⣮⡷⣫⢿⣹⣾⣿⡿⢫⣿⣿⣿⢿⡿⠁⠀⣼⣿⣿⣿⣿⣿⠏⣾⡯⠀⠀⣸⣿⣾⡇⠀⡸⣟⣿⣻⣿⡭⢸⣿⠃⣠⣿⣿⡿⠝⣻⠟⢉⠉⢹⣿⣿⢋⡷⣝⣿⣿⣿⣿⣾⣷⢯⣿⣿⠾⣿⣿
⣿⡿⣽⣳⣿⣿⣿⢮⣿⣿⡟⣭⡟⣥⣿⡟⠀⡾⣿⣿⠏⣿⠃⠀⣰⣿⣿⣿⣿⣿⡻⣾⣿⡱⠂⣰⣿⣿⡟⠀⣰⠟⢸⣿⡿⠋⢀⡿⠃⣰⠟⡏⢉⣧⢤⣷⣴⣾⣬⡛⠛⡉⣻⡟⣽⢾⣿⣿⣿⣿⣿⣻⣿⣿⡟⣿⣿
⣯⣿⣽⣿⣿⣿⣽⣯⣿⣿⡽⣯⢻⣽⡿⠁⢰⣿⣿⠋⣸⠿⢐⣾⣿⡿⠿⠋⢁⠤⠞⠋⠈⠡⠞⠿⠟⠋⠀⠀⠁⠐⠛⠉⠀⠀⠁⠀⠀⣠⣴⣿⡿⠚⠃⠉⠙⠺⣿⣿⣦⡀⡀⣿⣭⣯⣿⣿⣿⣿⣿⣧⣿⣿⣿⣽⣿
⣿⣿⣿⣿⣿⣳⣿⣿⣿⢧⣿⣷⡻⣼⠁⢠⣿⡾⢣⣺⢏⣌⢤⢰⠆⣱⠟⡶⢳⣶⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣽⣿⣽⣶⣦⡀⠀⠀⠀⠈⢻⣿⣿⣴⣿⣦⢿⡼⣿⣿⣿⣿⣷⢿⣿⣿⢞⣿
⣷⣿⣿⣿⣶⣿⣿⣿⣟⡶⣿⠶⣏⡅⢰⡟⠋⠀⣈⣶⡗⡿⠨⠛⠊⠉⠈⠁⠙⠛⠿⢿⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢋⡜⢻⣿⣿⣷⣿⡄⠀⠀⠀⠀⢻⡷⣾⣿⡾⣽⣿⣽⣿⡳⣿⣿⣿⣿⣿⡮⣿
⣿⣿⡿⣿⣿⣿⣿⡷⢞⣽⣯⠿⡽⡥⠋⠀⢨⣾⣟⣵⠞⢁⣴⣾⣿⣿⣿⣶⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠀⣸⣿⣿⣿⣿⡇⠀⠀⠀⠀⠈⢸⣿⣿⣿⣹⣞⣿⢿⣿⣭⣿⣿⣿⣿⡷⣿
⣿⣿⣿⣿⣿⣿⢯⡝⣻⡿⣏⢿⠋⠀⢀⣶⣿⣿⡟⢁⣶⠋⠀⢻⣿⣿⣿⣿⣻⡿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣶⣿⣿⣽⣿⣷⠃⠀⠀⠀⠀⢀⣿⣿⣿⣿⣯⡿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿
⣿⣿⣿⣿⣿⣝⡿⣞⣿⡟⣯⠇⠈⢰⣿⣿⣿⠏⠀⣼⣟⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⡿⢟⡿⠋⡁⠀⠀⠀⠀⡀⡬⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⣿⡟⣿⠟⠛
⣿⣿⣿⣿⣫⣞⣹⣾⡿⣝⣽⡏⠳⣿⣿⣾⠇⠀⠀⣿⣿⣶⣿⣿⣿⣯⢿⢿⣿⣟⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠟⠛⠉⠠⠊⠀⠀⠀⢀⢔⠌⢐⣿⣿⣿⣻⣿⣗⣯⡿⣿⣿⣿⣿⡿⠁⠸⠉
⣿⣿⣟⣷⣫⢾⣿⣟⣵⣾⣿⣷⠀⠈⠻⠟⠀⠀⠀⢸⣿⣿⣿⢋⢙⠽⡩⡘⣼⠟⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⡒⠲⠂⠓⠌⠢⠂⠈⣿⣿⣿⣿⣿⣯⣿⣿⣽⣿⣿⣿⣢⡀⠀⠀
⣿⣿⣿⢾⣻⣿⡿⢮⣽⣿⣿⣿⣆⠀⠀⠀⠀⡀⠀⠀⠙⢍⠻⠾⡎⡇⠳⠃⠁⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⠟⢁⣿⠟⠛⠓⠛⠀
⣿⠿⣭⣿⣿⢟⣹⣿⣿⣿⣿⣿⣿⣄⠀⠈⠀⠺⡤⠀⢀⠀⠁⠀⠀⠀⠀⠀⢁⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣁⣠⡾⠋⠀⠀⠀⠀⠀
⣷⣿⣿⣿⣏⣿⣿⣿⡟⣿⣿⣿⣿⣿⡄⠀⠀⠈⠀⠀⠡⠋⠔⠂⠤⠶⠢⠍⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠳⠖⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣟⣼⣿⠊⠁⠀⠀⠀⠀⠀⠀⠀
⣿⣿⢿⣫⣾⣏⣾⣧⣾⣹⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⠼⣋⢼⣟⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣽⣿⣾⣏⣿⣱⣿⡧⢾⡷⣿⣿⣿⣿⣿⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⡸⣉⠞⣉⡞⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀
⡿⣿⣿⣭⣿⣧⣿⡷⢫⣷⣿⣿⣯⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⢃⡵⣩⠚⡥⣏⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀
⡽⣿⣿⣯⣿⡷⣿⡟⣯⣿⣮⣿⣯⢻⣿⣷⣧⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⡿⢡⠞⣤⠛⡔⣯⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠼⣿⣿⣷⣿⣏⣿⡟⣿⣿⣾⣿⣿⢫⣿⡗⣿⣦⣤⡁⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠐⠂⠚⠀⠀⠀⠀⠀⠀⣀⣤⣾⣿⣿⣿⣿⠟⣧⠚⣤⠛⣴⣷⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀
⡏⣽⣛⡷⣿⡔⣻⠏⣻⣿⣿⣿⡿⣋⣿⣻⢿⣷⣿⣻⣗⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⢀⣠⣴⣾⣿⣿⣿⣿⣿⣿⡿⢼⣳⣉⡴⢻⣼⣿⣾⣿⡆⠀⠀⠀⠀⠀⠀⠀
⡟⣼⠟⣧⣿⡟⢣⡜⢻⣿⣿⣿⣧⠛⡼⢃⣿⡿⣿⣿⡿⣿⣿⣻⣧⢤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣿⣿⣿⣿⣿⣿⢻⣿⣿⣿⠧⣼⢻⢿⣟⢻⡟⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
⠟⣤⢛⡴⢻⣟⢣⣼⢻⣿⣿⣿⡧⢛⡔⢋⣞⡇⠈⠛⢿⣿⣿⣟⡿⣽⣿⣿⣿⣷⣶⣤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⢿⢣⣿⡧⣿⢦⡟⡄⠘⣿⣯⡞⡇⠀⠀⠀⠀⠀⠀
⣙⠦⣙⢆⡳⣿⣹⣿⣹⣿⣿⣿⠷⣩⢼⣙⡎⡇⠀⠀⠀⠈⠻⣻⣿⣯⣻⣖⣻⣻⣓⣓⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⡿⢻⣿⣿⣿⣷⣿⣿⢃⣿⡥⣿⣼⣿⣼⢳⠐⡀⠸⣧⠼⣷⠀⠀⠀⠀⠀⠀
⣉⠶⣍⢾⣳⢾⡵⣿⣸⠄⣿⣿⠖⣡⢾⡇⢿⠇⠀⠀⠀⠀⠀⠀⠈⠙⠻⢗⣯⡩⠗⢋⣰⣭⣽⣷⣿⣿⢿⣿⣿⣿⣿⢟⣯⣿⣿⠿⠋⠀⣿⣿⡿⢺⣿⣹⣇⣹⣿⣷⣿⣿⣏⣿⠇⠀⠈⠄⣷⢌⣹⡆⠀⠀⠀⠀⠀
⢬⡲⣏⠾⡽⣺⣷⣿⣿⠀⣿⣟⡲⣥⣿⡩⠞⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡐⣿⣿⣿⣿⣿⣿⡿⣋⣽⣭⠼⣭⡿⠝⠁⡁⠆⠀⢸⣽⢧⡟⢸⣿⣽⡧⣿⣧⣿⣿⣿⣿⡟⠀⠀⠀⠀⢺⣦⣟⣧⠀⠀⠀⠀⠀
⢬⣗⣿⢃⣿⢟⣿⢿⣿⠀⢸⣳⢣⣿⣯⡔⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣬⣹⠟⠀⢨⠀⠀⠀⠉⠙⡟⠉⠉⠁⠀⠀⠀⡧⠀⠀⣬⣿⢸⠃⠈⣿⣇⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⡘⣧⡟⣹⡀⠀⠀⠀⠀
⠤⣿⣿⢺⣿⣿⣿⣻⣿⠁⣾⣇⡟⣼⣇⡶⠈⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢾⡹⠃⠀⠀⢸⠀⠀⠀⠀⢘⠇⠀⠀⠀⠀⠀⠀⣧⠀⠀⣣⡟⣿⠀⠀⢻⣿⡟⣿⣿⣿⣿⡿⣤⠀⡆⠀⠀⠐⠌⣿⣿⣧⡇⠀⠀⠀⠀
⠱⣿⢿⢩⣿⡏⢿⣿⣿⣿⢏⣼⣻⣿⣹⠃⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⢀⣿⠎⠀⠀⠀⠀⡇⠀⠀⠀⠀⢼⠀⠀⠀⠀⠀⠀⠀⡏⠀⢸⣿⣏⡏⠀⠀⠈⣿⣿⣿⣿⣿⣿⢃⣿⡀⣇⠀⠀⢐⠀⣿⣿⢰⣷⠀⠀⠀⠀
⣱⣿⣿⣯⣿⡇⠨⣿⣟⡿⣾⣿⣿⣿⡟⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⣼⠅⠀⠀⠀⢀⠊⠀⠀⠀⠀⠠⡇⠀⠀⠀⠀⠀⠀⠀⠃⠀⠘⣿⣿⡇⠀⠀⠀⠹⣿⣿⣿⣿⣿⢹⣿⣧⠙⠀⠠⠏⠀⣿⣿⢸⣾⠀⠀⠀⠀
⣽⣿⣿⣿⣿⣿⢀⡿⣾⣿⣟⣿⣿⢿⡇⠀⠀⠀⠀⠀⠈⠀⣀⠁⠀⢸⡟⠀⢀⣤⡲⠁⠀⠀⠀⠀⠀⠘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀⠀⠀⠙⣿⣿⣿⡿⢸⡿⣿⣧⣆⠌⠂⠀⣿⣿⠳⣿⠈⠀⠄⠀
*/